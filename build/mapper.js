// Generated by CoffeeScript 1.7.1
(function() {
  (function(undefined_) {
    var cleanSep, extractTables, fakeFn, forEach, namespace, transposeMtx, trim;
    namespace = "od2v";
    if (typeof window !== "undefined") {
      this[namespace] = window[namespace] = window[namespace] || {};
    }
    if (typeof module !== "undefined") {
      this[namespace] = module.exports = {};
    }
    fakeFn = function() {
      return function() {
        throw new Error("No function found");
      };
    };
    trim = this[namespace + "common"].trim || fakeFn();
    cleanSep = this[namespace + "common"].cleanSep || fakeFn();
    forEach = this[namespace + "common"].forEach || fakeFn();
    transposeMtx = this[namespace + "common"].transposeMtx || fakeFn();
    extractTables = function(jsondata) {
      var err, tables;
      try {
        tables = [];
        forEach(jsondata, (function(value, key) {
          var len;
          if (!value.rows) {
            return;
          }
          this.push({
            fue: "",
            tit: "",
            uni: "",
            dim: [[], []],
            tot: [[], []],
            dat: []
          });
          len = 0;
          return forEach(value.rows, (function(row) {
            var k;
            if (!row.values || row.values.length < 2 || (!this.tit && !row.values[0])) {
              return;
            }
            if (!this.uni && this.tit) {
              this.uni = cleanSep(row.values[0]);
            }
            if (!this.tit) {
              this.tit = row.values[0];
            }
            if (len > 1 && row.values[1] === "" && !this.fue) {
              this.fue = cleanSep(row.values[0]);
            }
            if ("" === trim(row.values[1])) {
              return;
            }
            len++;
            k = 0;
            return forEach(row.values, (function(col, k) {
              if (len === 1) {
                if (k > 0) {
                  return this.dim[1].push(trim(col));
                }
              } else {
                if (k === 0) {
                  if (trim(col)) {
                    return this.dim[0].push(trim(col));
                  }
                } else {
                  if (!this.dat[len - 2]) {
                    this.dat[len - 2] = [];
                  }
                  return this.dat[len - 2].push(col);
                }
              }
            }), this);
          }), tables[tables.length - 1]);
        }), tables);
        return [null, tables];
      } catch (_error) {
        err = _error;
        return [err];
      }
    };
    this[namespace].extractTables = extractTables;
    return this[namespace].transposeMtx = transposeMtx;
  })();

}).call(this);
