// Generated by CoffeeScript 1.4.0
(function() {

  (function(undefined_) {
    var browserGetter, fakeRequester, namespace, nodeGetter;
    namespace = "od2v";
    if (typeof window !== "undefined") {
      this[namespace] = window[namespace] = window[namespace] || {};
    }
    if (typeof module !== "undefined") {
      this[namespace] = module.exports = {};
    }
    fakeRequester = function() {
      return function() {
        throw new Error("Cannot load URL. Neither XMLHttpRequest nor require(\"request\") were found");
      };
    };
    nodeGetter = function() {
      if (typeof require === "undefined") {
        return null;
      }
      return function(url, callback) {
        var opts, req;
        opts = require('url').parse(url);
        req = require("http").get(opts, function(res) {
          var data;
          res.setEncoding('utf8');
          data = "";
          res.on('data', function(chunk) {
            return data += chunk;
          });
          return res.on('end', function() {
            try {
              data = JSON.parse(data);
            } catch (e) {
              return callback(e);
            }
            return callback(null, data, res.headers);
          });
        });
        req.on('error', function(err) {
          if (err) {
            return callback(err);
          }
        });
        return req.end();
      };
    };
    browserGetter = function() {
      if (typeof XMLHttpRequest === "undefined") {
        return null;
      }
      return function(url, callback) {
        var xhr;
        xhr = new XMLHttpRequest();
        xhr.open("GET", url, true);
        xhr.onload = function() {
          var data, resHeaders;
          try {
            data = JSON.parse(xhr.responseText);
          } catch (e) {
            return callback(e);
          }
          resHeaders = xhr.getAllResponseHeaders();
          return callback(null, data, resHeaders);
        };
        xhr.onerror = function(e) {
          return callback(e);
        };
        return xhr.send(null);
      };
    };
    return this[namespace].get = browserGetter() || nodeGetter() || fakeGetter();
  })();

}).call(this);
